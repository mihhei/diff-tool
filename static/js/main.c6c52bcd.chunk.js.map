{"version":3,"sources":["components/Header.tsx","components/InputField.tsx","components/Button.tsx","functions/getDiff.tsx","components/Flipper.tsx","components/Container.tsx","functions/getTemplate.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","InputField","tag","getText","value","placeholder","onChange","event","target","Button","clickHandler","text","onClick","getDiff","XY","x","y","i","n","itemTemplate","Flipper","front","back","flip","Container","useState","setFlip","oldText","setOldText","newText","setNewText","diff","setDiff","textX","trim","match","textY","template","forEach","item","index","split","length","push","Math","max","getTemplate","alert","parse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6c52bcd.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Header: React.FC = () => {\n    return <div className=\"navbar\">DIFF TOOL</div>;\n};\n","import React from 'react';\n\ntype InputFieldProps = {\n    tag: string,\n    getText(tag: string, text: string): void,\n    value: string,\n};\n\nexport const InputField: React.FC<InputFieldProps> = ({ tag, getText, value }) => {\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        getText(tag, event.target.value);\n    };\n    return (\n        <div className=\"block\">\n            <input placeholder={'Place here ' + tag + ' text!'} onChange={changeHandler} value={value}></input>\n        </div>\n    );\n};\n","import React from 'react';\ntype ButtonProps = {\n    clickHandler(): void,\n    text: string,\n};\n\nexport const Button: React.FC<ButtonProps> = ({ clickHandler, text }) => {\n    return (\n        <div className=\"button\" onClick={clickHandler}>\n            {text}\n        </div>\n    );\n};\n","export const getDiff = (\n    XY: Record<string, number[]>,\n    x: string[],\n    y: string[],\n    i: number,\n    n: number,\n    itemTemplate: string,\n): string | undefined => {\n    if (n >= 1 && i >= 1 && x[i - 1] === y[n - 1]) {\n        itemTemplate = ' ' + x[i - 1] + itemTemplate;\n        return getDiff(XY, x, y, i - 1, n - 1, itemTemplate);\n    } else if (n > 0 && (i === 0 || XY[i][n - 1] >= XY[i - 1][n])) {\n        itemTemplate = ' <span id=\"green\">++' + y[n - 1] + '</span>' + itemTemplate;\n        return getDiff(XY, x, y, i, n - 1, itemTemplate);\n    } else if (i > 0 && (n === 0 || XY[i][n - 1] < XY[i - 1][n])) {\n        itemTemplate = ' <span id=\"red\">--' + x[i - 1] + '</span>' + itemTemplate;\n        return getDiff(XY, x, y, i - 1, n, itemTemplate);\n    } else {\n        return '<li>' + itemTemplate;\n    }\n};\n","import React, { ReactElement } from 'react';\n\ntype FlipperProps = {\n    front: ReactElement,\n    back: ReactElement,\n    flip: string,\n};\n\nexport const Flipper: React.FC<FlipperProps> = ({ front, back, flip }) => {\n    return (\n        <div className=\"block\">\n            <div className={'flip-container ' + flip}>\n                <div className=\"flipper\">\n                    <div className=\"front\">{front}</div>\n                    <div className=\"back\">{back}</div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { InputField } from './InputField';\nimport { Button } from './Button';\nimport parse from 'html-react-parser';\nimport { getTemplate } from '../functions/getTemplate';\nimport { Flipper } from './Flipper';\n\nexport const Container: React.FC = () => {\n    const [flip, setFlip] = useState<string>('');\n    const [oldText, setOldText] = useState<string>('');\n    const [newText, setNewText] = useState<string>('');\n    const [diff, setDiff] = useState<string>('');\n\n    const getText = (tag: string, text: string) => {\n        if (tag === 'old') {\n            setOldText(text);\n        } else {\n            setNewText(text);\n        }\n    };\n\n    const resetButton = () => {\n        setFlip('');\n        setOldText('');\n        setNewText('');\n        setDiff('');\n    };\n\n    const showDiff = () => {\n        if (!oldText || !newText) {\n            alert('Both input are required!!!');\n        } else {\n            setFlip('flip');\n            setDiff('<ol>' + getTemplate(oldText, newText) + '</ol>');\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <InputField tag=\"old\" getText={getText} value={oldText} />\n            <Flipper\n                front={<Button clickHandler={showDiff} text={'Show DIFF'} />}\n                back={<div className=\"result\">{parse(diff)}</div>}\n                flip={flip}\n            />\n            <InputField tag=\"new\" getText={getText} value={newText} />\n            <Flipper front={<></>} back={<Button clickHandler={resetButton} text={'Try again!'} />} flip={flip} />\n        </div>\n    );\n};\n","import { getDiff } from './getDiff';\n\nexport const getTemplate = (oldText: string, newText: string): string | undefined => {\n    const textX = oldText.trim().match(/[^.!?]+[.!?]+|[^.!?]+$/g) ?? [];\n    const textY = newText.trim().match(/[^.!?]+[.!?]+|[^.!?]+$/g) ?? [];\n    let template = '';\n    textX.forEach((item, index) => {\n        const x = item.split(' ');\n        const y = textY[index].split(' ');\n        const XY: Record<string, number[]> = {};\n        for (let i = 0; i < x.length + 1; i++) {\n            XY[i] = [0];\n            for (let n = 1; n < y.length + 1; n++) {\n                if (i === 0) {\n                    XY[i].push(0);\n                } else if (x[i - 1] === y[n - 1]) {\n                    XY[i].push(XY[i - 1][n - 1] + 1);\n                } else {\n                    XY[i].push(Math.max(XY[i][n - 1], XY[i - 1][n]));\n                }\n            }\n        }\n        const i = x.length;\n        const n = y.length;\n        const itemTemplate = '</li>';\n        template = template + getDiff(XY, x, y, i, n, itemTemplate);\n    });\n    return template;\n};\n","import React from 'react';\nimport { Header } from './components/Header';\nimport { Container } from './components/Container';\n\nconst App: React.FC = () => {\n    return (\n        <>\n            <Header />\n            <Container />\n        </>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}