{"version":3,"sources":["components/Header.tsx","components/InputField.tsx","components/Button.tsx","components/Container.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","InputField","tag","getText","value","placeholder","onChange","event","target","Button","clickHandler","text","onClick","Container","useState","flip","setFlip","oldText","setOldText","newText","setNewText","diff","setDiff","textX","trim","match","textY","forEach","item","index","x","split","y","XY","i","length","n","push","Math","max","getDiff","itemTemplate","prev","alert","parse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b8c74f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header: React.FC = () => {\r\n  return <div className=\"navbar\">DIFF TOOL</div>;\r\n};\r\n","import React from 'react';\r\n\r\ntype InputFieldProps = {\r\n  tag: string,\r\n  getText(tag: string, text: string): void,\r\n  value: string,\r\n};\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({\r\n  tag,\r\n  getText,\r\n  value,\r\n}) => {\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    getText(tag, event.target.value);\r\n  };\r\n  return (\r\n    <input\r\n      placeholder={'Place here ' + tag + ' text!'}\r\n      onChange={changeHandler}\r\n      value={value}\r\n    ></input>\r\n  );\r\n};\r\n","import React from 'react';\r\n type ButtonProps = {\r\n     clickHandler (): void,\r\n     text: string,\r\n }\r\n\r\nexport const Button: React.FC<ButtonProps> = ({clickHandler, text}) => {\r\n    return (\r\n        <div className=\"button\" onClick={clickHandler}>{text}</div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { InputField } from './InputField';\r\nimport { Button } from './Button';\r\nimport parse from 'html-react-parser';\r\n\r\nexport const Container: React.FC = () => {\r\n  const [flip, setFlip] = useState<string>('');\r\n  const [oldText, setOldText] = useState<string>('');\r\n  const [newText, setNewText] = useState<string>('');\r\n  const [diff, setDiff] = useState<string>('');\r\n\r\n  const showDiff = (): void => {\r\n    if (oldText && newText) {\r\n      setFlip('flip');\r\n      const textX = oldText.trim().match(/[^.!?]+[.!?]+|[^.!?]+$/g) ?? [];\r\n      const textY = newText.trim().match(/[^.!?]+[.!?]+|[^.!?]+$/g) ?? [];\r\n      textX.forEach((item, index) => {\r\n        const x = item.split(' ');\r\n        const y = textY[index].split(' ');\r\n        const XY: Record<string, number[]> = {};\r\n        for (let i = 0; i < x.length + 1; i++) {\r\n          XY[i] = [0];\r\n          for (let n = 1; n < y.length + 1; n++) {\r\n            if (i === 0) {\r\n              XY[i].push(0);\r\n            } else {\r\n              if (x[i - 1] === y[n - 1]) {\r\n                XY[i].push(XY[i - 1][n - 1] + 1);\r\n              } else {\r\n                XY[i].push(Math.max(XY[i][n - 1], XY[i - 1][n]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n        const getDiff = (\r\n          XY: Record<string, number[]>,\r\n          x: string[],\r\n          y: string[],\r\n          i: number,\r\n          n: number,\r\n          itemTemplate: string\r\n        ): void => {\r\n          if (n >= 1 && i >= 1 && x[i - 1] === y[n - 1]) {\r\n            itemTemplate = ' ' + x[i - 1] + itemTemplate;\r\n            i -= 1;\r\n            n -= 1;\r\n            getDiff(XY, x, y, i, n, itemTemplate);\r\n          } else {\r\n            if (n > 0 && (i === 0 || XY[i][n - 1] >= XY[i - 1][n])) {\r\n              itemTemplate =\r\n                ' <span id=\"green\">++' + y[n - 1] + '</span>' + itemTemplate;\r\n              n -= 1;\r\n              getDiff(XY, x, y, i, n, itemTemplate);\r\n            } else {\r\n              if (i > 0 && (n === 0 || XY[i][n - 1] < XY[i - 1][n])) {\r\n                itemTemplate =\r\n                  ' <span id=\"red\">--' + x[i - 1] + '</span>' + itemTemplate;\r\n                i -= 1;\r\n                getDiff(XY, x, y, i, n, itemTemplate);\r\n              } else {\r\n                setDiff((prev) => prev + '<div>' + itemTemplate);\r\n              }\r\n            }\r\n          }\r\n        };\r\n        let i = x.length;\r\n        let n = y.length;\r\n        let itemTemplate = '</div>';\r\n\r\n        getDiff(XY, x, y, i, n, itemTemplate);\r\n      });\r\n    } else {\r\n      alert('Both input are required!!!');\r\n    }\r\n  };\r\n\r\n  const getText = (tag: string, text: string) => {\r\n    if (tag === 'old') {\r\n      setOldText(text);\r\n    } else {\r\n      setNewText(text);\r\n    }\r\n  };\r\n\r\n  const resetButton = () => {\r\n    setFlip('');\r\n    setOldText('');\r\n    setNewText('');\r\n    setDiff('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"block\">\r\n        <InputField tag=\"old\" getText={getText} value={oldText} />\r\n      </div>\r\n      <div className=\"block\">\r\n        <div className={'flip-container ' + flip}>\r\n          <div className=\"flipper\">\r\n            <div className=\"front\">\r\n              <Button clickHandler={showDiff} text={'Show DIFF'} />\r\n            </div>\r\n            <div className=\"back\">\r\n              <div className=\"result\">{parse(diff)}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"block\">\r\n        <InputField tag=\"new\" getText={getText} value={newText} />\r\n      </div>\r\n      <div className=\"block\">\r\n        <div className={'flip-container ' + flip}>\r\n          <div className=\"flipper\">\r\n            <div className=\"front\"></div>\r\n            <div className=\"back\">\r\n              <Button clickHandler={resetButton} text={'Try again!'} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Header } from './components/Header';\r\nimport { Container } from './components/Container';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}